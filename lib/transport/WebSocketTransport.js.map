{"version":3,"file":"WebSocketTransport.js","sourceRoot":"","sources":["../../src/transport/WebSocketTransport.ts"],"names":[],"mappings":";;;;;;AAAA,4CAA+B;AAG/B,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,IAAI,YAAa,CAAC;AAExD,MAAa,kBAAkB;IAI3B,YAAmB,MAA0B;QAA1B,WAAM,GAAN,MAAM,CAAoB;IAAG,CAAC;IAE1C,IAAI,CAAC,IAAyB;QACjC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAEM,cAAc,CAAC,IAAiC;QACnD,OAAO,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;IAC9F,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,GAAW,EAAE,OAAa;QACrC,IAAI,CAAC;YACD,qDAAqD;YACrD,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAEzE,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,qDAAqD;YACrD,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,UAAU,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,IAAa,EAAE,MAAe;QACvC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC;IACjD,CAAC;CAEJ;AA3CD,gDA2CC","sourcesContent":["import NodeWebSocket from \"ws\";\r\nimport { ITransport, ITransportEventMap } from \"./ITransport\";\r\n\r\nconst WebSocket = globalThis.WebSocket || NodeWebSocket;\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    ws: WebSocket | NodeWebSocket;\r\n    protocols?: string | string[];\r\n\r\n    constructor(public events: ITransportEventMap) {}\r\n\r\n    public send(data: Buffer | Uint8Array): void {\r\n        this.ws.send(data);\r\n    }\r\n\r\n    public sendUnreliable(data: ArrayBuffer | Array<number>): void {\r\n        console.warn(\"colyseus.js: The WebSocket transport does not support unreliable messages\");\r\n    }\r\n\r\n    /**\r\n     * @param url URL to connect to\r\n     * @param headers custom headers to send with the connection (only supported in Node.js. Web Browsers do not allow setting custom headers)\r\n     */\r\n    public connect(url: string, headers?: any): void {\r\n        try {\r\n            // Node or Bun environments (supports custom headers)\r\n            this.ws = new WebSocket(url, { headers, protocols: this.protocols });\r\n\r\n        } catch (e) {\r\n            // browser environment (custom headers not supported)\r\n            this.ws = new WebSocket(url, this.protocols);\r\n        }\r\n\r\n        this.ws.binaryType = 'arraybuffer';\r\n        this.ws.onopen = this.events.onopen;\r\n        this.ws.onmessage = this.events.onmessage;\r\n        this.ws.onclose = this.events.onclose;\r\n        this.ws.onerror = this.events.onerror;\r\n    }\r\n\r\n    public close(code?: number, reason?: string) {\r\n        this.ws.close(code, reason);\r\n    }\r\n\r\n    get isOpen() {\r\n        return this.ws.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n}\r\n"]}