{"version":3,"file":"Client.js","sourceRoot":"","sources":["../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerError } from './errors/Errors';\r\nimport { Room } from './Room';\r\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\r\nimport { HTTP } from \"./HTTP\";\r\nimport { Auth } from './Auth';\r\nimport { SeatReservation } from './Protocol';\r\nimport { discordURLBuilder } from './3rd_party/discord';\r\n\r\nexport type JoinOptions = any;\r\n\r\nexport class MatchMakeError extends Error {\r\n    code: number;\r\n    constructor(message: string, code: number) {\r\n        super(message);\r\n        this.code = code;\r\n        this.name = \"MatchMakeError\";\r\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\r\n    }\r\n}\r\n\r\n// - React Native does not provide `window.location`\r\n// - Cocos Creator (Native) does not provide `window.location.hostname`\r\nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\")\r\n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\r\n    : \"ws://127.0.0.1:2567\";\r\n\r\nexport interface EndpointSettings {\r\n    hostname: string,\r\n    secure: boolean,\r\n    port?: number,\r\n    pathname?: string,\r\n    searchParams?: string,\r\n}\r\n\r\nexport interface ClientOptions {\r\n    headers?: { [id: string]: string };\r\n    urlBuilder?: (url: URL) => string;\r\n}\r\n\r\n//  Cocos Creator (Native) does not support `URL` and `URLSearchParams` \r\nconst parseURL = (url: string) => {\r\n    let protocol = '';\r\n    let hostname = '';\r\n    let port = '';\r\n    let pathname = '';\r\n    let search = '';\r\n\r\n    // Parse protocol\r\n    const protocolMatch = url.match(/^(https?|wss?):\\/\\//);\r\n    if (protocolMatch) {\r\n        protocol = protocolMatch[1] + ':';\r\n        url = url.substring(protocolMatch[0].length);\r\n    }\r\n\r\n    // Separate path and query parameters\r\n    const pathIndex = url.indexOf('/');\r\n    let hostPart = pathIndex === -1 ? url : url.substring(0, pathIndex);\r\n    \r\n    if (pathIndex !== -1) {\r\n        const pathAndSearch = url.substring(pathIndex);\r\n        const searchIndex = pathAndSearch.indexOf('?');\r\n        if (searchIndex !== -1) {\r\n            pathname = pathAndSearch.substring(0, searchIndex);\r\n            search = pathAndSearch.substring(searchIndex + 1);\r\n        } else {\r\n            pathname = pathAndSearch;\r\n        }\r\n    } else {\r\n        pathname = '';\r\n    }\r\n\r\n    // Parse hostname and port\r\n    const portMatch = hostPart.match(/^(.+):(\\d+)$/);\r\n    if (portMatch) {\r\n        hostname = portMatch[1];\r\n        port = portMatch[2];\r\n    } else {\r\n        hostname = hostPart;\r\n    }\r\n\r\n    return { protocol, hostname, port, pathname, search };\r\n};\r\n\r\nexport class Client {\r\n    static VERSION = process.env.VERSION;\r\n\r\n    public http: HTTP;\r\n    public auth: Auth;\r\n\r\n    protected settings: EndpointSettings;\r\n    protected urlBuilder: (url: URL) => string;\r\n\r\n    constructor(\r\n        settings: string | EndpointSettings = DEFAULT_ENDPOINT,\r\n        options?: ClientOptions,\r\n    ) {\r\n        if (typeof (settings) === \"string\") {\r\n\r\n            //\r\n            // endpoint by url\r\n            //\r\n            let urlString = settings;\r\n            if (settings.startsWith(\"/\")) {\r\n                // If it's a relative path, concatenate with default endpoint\r\n                urlString = DEFAULT_ENDPOINT + settings;\r\n            }\r\n\r\n            const parsedUrl = parseURL(urlString);\r\n            const secure = (parsedUrl.protocol === \"https:\" || parsedUrl.protocol === \"wss:\");\r\n            const port = Number(parsedUrl.port || (secure ? 443 : 80));\r\n\r\n            this.settings = {\r\n                hostname: parsedUrl.hostname,\r\n                pathname: parsedUrl.pathname,\r\n                port,\r\n                secure,\r\n                searchParams: parsedUrl.search || undefined,\r\n            };\r\n\r\n        } else {\r\n            //\r\n            // endpoint by settings\r\n            //\r\n            if (settings.port === undefined) {\r\n                settings.port = (settings.secure) ? 443 : 80;\r\n            }\r\n            if (settings.pathname === undefined) {\r\n                settings.pathname = \"\";\r\n            }\r\n            this.settings = settings;\r\n        }\r\n\r\n        // make sure pathname does not end with \"/\"\r\n        if (this.settings.pathname.endsWith(\"/\")) {\r\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\r\n        }\r\n\r\n        this.http = new HTTP(this, options?.headers || {});\r\n        this.auth = new Auth(this.http);\r\n\r\n        this.urlBuilder = options?.urlBuilder;\r\n\r\n        //\r\n        // Discord Embedded SDK requires a custom URL builder\r\n        //\r\n        if (\r\n            !this.urlBuilder &&\r\n            typeof (window) !== \"undefined\" &&\r\n            window?.location?.hostname?.includes(\"discordsays.com\")\r\n        ) {\r\n            this.urlBuilder = discordURLBuilder;\r\n            console.log(\"Colyseus SDK: Discord Embedded SDK detected. Using custom URL builder.\");\r\n        }\r\n    }\r\n\r\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\r\n    }\r\n\r\n    /**\r\n     * Re-establish connection with a room this client was previously connected to.\r\n     *\r\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\r\n     * @param rootSchema (optional) Concrete root schema definition\r\n     * @returns Promise<Room>\r\n     */\r\n    public async reconnect<T>(reconnectionToken: string, rootSchema?: SchemaConstructor<T>) {\r\n        if (typeof (reconnectionToken) === \"string\" && typeof (rootSchema) === \"string\") {\r\n            throw new Error(\"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\");\r\n        }\r\n        const [roomId, token] = reconnectionToken.split(\":\");\r\n\t\tif (!roomId || !token) {\r\n\t\t\tthrow new Error(\"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\");\r\n\t\t}\r\n        return await this.createMatchMakeRequest<T>('reconnect', roomId, { reconnectionToken: token }, rootSchema);\r\n    }\r\n\r\n    public async consumeSeatReservation<T>(\r\n        response: SeatReservation,\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room // used in devMode\r\n    ): Promise<Room<T>> {\r\n        const room = this.createRoom<T>(response.room.name, rootSchema);\r\n        room.roomId = response.room.roomId;\r\n        room.sessionId = response.sessionId;\r\n\r\n        const options: any = { sessionId: room.sessionId };\r\n\r\n        // forward \"reconnection token\" in case of reconnection.\r\n        if (response.reconnectionToken) {\r\n            options.reconnectionToken = response.reconnectionToken;\r\n        }\r\n\r\n        const targetRoom = reuseRoomInstance || room;\r\n        room.connect(this.buildEndpoint(response.room, options, response.protocol), response.devMode && (async () => {\r\n            console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} Re-establishing connection with room id '${room.roomId}'...`); // 🔄\r\n\r\n            let retryCount = 0;\r\n            let retryMaxRetries = 8;\r\n\r\n            const retryReconnection = async () => {\r\n                retryCount++;\r\n\r\n                try {\r\n                    await this.consumeSeatReservation(response, rootSchema, targetRoom);\r\n                    console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x2705)} Successfully re-established connection with room '${room.roomId}'`); // ✅\r\n\r\n                } catch (e) {\r\n                    if (retryCount < retryMaxRetries) {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} retrying... (${retryCount} out of ${retryMaxRetries})`); // 🔄\r\n                        setTimeout(retryReconnection, 2000);\r\n\r\n                    } else {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x274C)} Failed to reconnect. Is your server running? Please check server logs.`); // ❌\r\n                    }\r\n                }\r\n            };\r\n\r\n            setTimeout(retryReconnection, 2000);\r\n        }), targetRoom, response, this.http.headers);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const onError = (code, message) => reject(new ServerError(code, message));\r\n            targetRoom.onError.once(onError);\r\n\r\n            targetRoom['onJoin'].once(() => {\r\n                targetRoom.onError.remove(onError);\r\n                resolve(targetRoom);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async createMatchMakeRequest<T>(\r\n        method: string,\r\n        roomName: string,\r\n        options: JoinOptions = {},\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room,\r\n    ) {\r\n        const response = (\r\n            await this.http.post<SeatReservation>(`matchmake/${method}/${roomName}`, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(options)\r\n            })\r\n        ).data;\r\n\r\n        // FIXME: HTTP class is already handling this as ServerError.\r\n        // @ts-ignore\r\n        if (response.error) { throw new MatchMakeError(response.error, response.code); }\r\n\r\n        // forward reconnection token during \"reconnect\" methods.\r\n        if (method === \"reconnect\") {\r\n            response.reconnectionToken = options.reconnectionToken;\r\n        }\r\n\r\n        return await this.consumeSeatReservation<T>(response, rootSchema, reuseRoomInstance);\r\n    }\r\n\r\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\r\n        return new Room<T>(roomName, rootSchema);\r\n    }\r\n\r\n    protected buildEndpoint(room: any, options: any = {}, protocol: string = \"ws\") {\r\n        let searchParams = this.settings.searchParams || \"\";\r\n\r\n        // forward authentication token\r\n        if (this.http.authToken) {\r\n            options['_authToken'] = this.http.authToken;\r\n        }\r\n\r\n        // append provided options\r\n        for (const name in options) {\r\n            if (!options.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            searchParams += (searchParams ? '&' : '') + `${name}=${options[name]}`;\r\n        }\r\n\r\n        if (protocol === \"h3\") {\r\n            protocol = \"http\";\r\n        }\r\n\r\n        let endpoint = (this.settings.secure)\r\n            ? `${protocol}s://`\r\n            : `${protocol}://`;\r\n\r\n        if (room.publicAddress) {\r\n            endpoint += `${room.publicAddress}`;\r\n\r\n        } else {\r\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}`;\r\n        }\r\n\r\n        const endpointURL = `${endpoint}/${room.processId}/${room.roomId}?${searchParams}`;\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getHttpEndpoint(segments: string = '') {\r\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\r\n\r\n        let endpointURL = `${(this.settings.secure) ? \"https\" : \"http\"}://${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}${path}`;\r\n\r\n        if (this.settings.searchParams) {\r\n            endpointURL += `?${this.settings.searchParams}`;\r\n        }\r\n\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getEndpointPort() {\r\n        return (this.settings.port !== 80 && this.settings.port !== 443)\r\n            ? `:${this.settings.port}`\r\n            : \"\";\r\n    }\r\n}\r\n"]}